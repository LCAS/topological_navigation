##-----------------------------------------------------------------------------
# map related parameters
# ----------------------
# map_name: name of the topological map
# n_polytunnels: integer>0, 1 - open farm, n (>0) - n polytunnels
# n_farm_rows:
#   func: none/copy, function to populate values for all rows
#   value: array of integers, number of rows in the farm (n_polytunnels == 0)
#                             or in a polytunnel (n_polytunnels >= 1). list
#                             with one value for open farm, one (func = 'copy')
#                             or n_polytunnels (func = 'none') values for
#                             polytunnels
# second_head_lane: true/false, a secondary head lane at the other end.
#                               edges connecting adjacent rows can be considered
#                               only if there is continuity across all rows
# pri_head_nodes:
#   polytunnel_01: [], array of primary head nodes of rows in order
#   polytunnel_02: [], array of primary head nodes of rows in order
#   ...
# sec_head_nodes:   , ignored if second_had_lane is false
#   polytunnel_01: [], array of secondary head nodes of rows in order
#   polytunnel_02: [], array of secondary head nodes of rows in order
#   ...
# row_nodes_config_type: semi_auto_generate/full_details
#   semi_auto_generate: only given the number of nodes for each polytunnel rows
#   full_details: provide full details of nodes for each polytunnel row
# row_node_name_format: t%d-r%d-c%d/None
#   't%d-r%d-c%d' % (polytunnel_number, row_number, node_number)
# row_nodes:
#   polytunnel_01:
#     row_01: [], array of nodes of first topo-nav row of first polytunnel in order
#     row_02: [], array of nodes of second topo-nav row of first polytunnel in order
#   polytunnel_02:
#     row_01: [], array of nodes of first topo-nav row of second polytunnel in order
#     row_02: [], array of nodes of second topo-nav row of second polytunnel in order
#   ...
# end_row_nodes:
#   polytunnel_01: [], array of end nodes of rows in order
#   polytunnel_02: [], array of end nodes of rows in order
#   ...
# yield_per_node:
#   func: none/copy/gauss, function to populate values for all rows
#   value: array of floats, yield at a topo_nav node (from the node to the
#                           next), per row (values for all rows
#                           (n_polytunnels = 0) or all polytunnels, or mu and
#                           sigma), g
# local_storage_nodes: string, nodes corresponding to the local storages. the
#                              closest one will be assigned to each row. will be
#                              used only as starting place for pickers when
#                              cold storage is used
# use_cold_storage: true/false, unload at cold storage / local storage
# cold_storage_node: string, name of the cold storage node in topo map
##-----------------------------------------------------------------------------
n_polytunnels: 20
n_farm_rows:
  func: copy
  value: [3]
second_head_lane: false
# WayPoint108 is the head of row_01, row_02; WayPoint107 is the head of row_03, row04;
# WayPoint106 is the head of row_01, row_02; WayPoint105 is the head of row_03, row04;
# ...
pri_head_nodes:
  polytunnel_01: [WayPoint108, WayPoint107]
  polytunnel_02: [WayPoint106, WayPoint105]
  polytunnel_03: [WayPoint104, WayPoint103]
  polytunnel_04: [WayPoint102, WayPoint101]
  polytunnel_05: [WayPoint100, WayPoint99]
  polytunnel_06: [WayPoint98, WayPoint97]
  polytunnel_07: [WayPoint152, WayPoint153]
  polytunnel_08: [WayPoint155, WayPoint156]
  polytunnel_09: [WayPoint157, WayPoint158]
  polytunnel_10: [WayPoint160, WayPoint161]
  polytunnel_11: [WayPoint163, WayPoint164]
  polytunnel_12: [WayPoint165, WayPoint166]
  polytunnel_13: [WayPoint167, WayPoint168]
  polytunnel_14: [WayPoint170, WayPoint171]
  polytunnel_15: [WayPoint172, WayPoint173]
  polytunnel_16: [WayPoint174, WayPoint175]
  polytunnel_17: [WayPoint176, WayPoint177]
  polytunnel_18: [WayPoint179, WayPoint180]
  polytunnel_19: [WayPoint181, WayPoint182]
  polytunnel_20: [WayPoint183, WayPoint184]
sec_head_nodes: None

row_nodes_config_type: semi_auto_generate
# only given the number of nodes for each polytunnel
row_nodes: [45, 85, 85, 85, 83, 83, 83, 83, 81, 81, 74, 42, 53, 53, 53, 53, 50, 50, 50, 50]

row_node_name_format: t%d-r%d-c%d
# example of the the polytunnels, rows and nodes
#  polytunnel_01:
#    row_01: [t0-r0-c0, t0-r0-c1, ..., t0-r0-c44]
#    row_02: [t0-r1-c0, t0-r1-c1, ..., t0-r1-c44]
#    row_03: [t0-r2-c0, t0-r2-c1, ..., t0-r2-c44]
#    row_04: [t0-r3-c0, t0-r3-c1, ..., t0-r3-c44]
#  polytunnel_02:
#    row_01: [t1-r0-c0, t1-r0-c1, ..., t1-r0-c84]
#    row_02: [t1-r1-c0, t1-r1-c1, ..., t1-r1-c84]
#    row_03: [t1-r2-c0, t1-r2-c1, ..., t1-r2-c84]
#    row_04: [t1-r3-c0, t1-r3-c1, ..., t1-r3-c84]
#   ...
#  polytunnel_20:
#    row_01: [t19-r0-c0, t19-r0-c1, ..., t19-r0-c49]
#    row_02: [t19-r1-c0, t19-r1-c1, ..., t19-r1-c49]
#    row_03: [t19-r2-c0, t19-r2-c1, ..., t19-r2-c49]
#    row_04: [t19-r3-c0, t19-r3-c1, ..., t19-r3-c49]

yield_per_node:
  func: gauss
  value: [200.0, 5.0]

local_storage_nodes: [s12]
use_cold_storage: false
cold_storage_node: None

##-----------------------------------------------------------------------------
# des related parameters
# ----------------------
# with_robots: true/false, whether service robots are available or not.
#                          if available, they are controlled from coordinator
# n_iteration: integer, number of times whole picking has to be repeated
##-----------------------------------------------------------------------------
with_robots: true
n_iteration: 1

##-----------------------------------------------------------------------------
# des related parameters
# ----------------------
# map_name: name of the topological map
# des_env: simpy or ros, type of environment to run DES. simpy - as fast as
#                        possible, ros - realtime (scalable)
##-----------------------------------------------------------------------------
map_name: clockhouse
des_env: simpy


##-----------------------------------------------------------------------------
# picker related parameters
# ----------------------
# n_pickers: integer > 0, number of pickers
# picker_picking_rate:
#   func: none/copy/gauss, function to populate values for all pickers
#   value: array of floats, speed of pickers while picking (values for all
#                           pickers, or mu and sigma), m/s
# picker_transportation_rate:
#   func: none/copy/gauss, function to populate values for all pickers
#   value: array of floats, transportation speed of pickers (values for all
#                           pickers, or mu and sigma), m/s
# picker_max_n_trays:
#   func: none/copy, function to populate values for all pickers
#   value: array of integers, maximum number of trays that can be carried by
#                             each pickers (values for all pickers, or single
#                             value to be copied)
# picker_unloading_time:
#   func: none/copy/gauss, function to populate values for all pickers
#   value: array of floats, time required by each picker to unload a tray at
#                           local storage / robot (values for all pickers, or
#                           mu and sigma), s
# tray_capacity: 3000 # capacity of each tray, g
##-----------------------------------------------------------------------------
n_pickers: 3
picker_ids: [picker101, picker102]
#, picker103]
picker_picking_rate:
  func: gauss
  value: [0.4, 0.02]
picker_transportation_rate:
  func: gauss
  value: [1.0, 0.04]
picker_max_n_trays:
  func: copy
  value: [1]
picker_unloading_time:
  func: gauss
  value: [10.0, 0.2]
tray_capacity: 1200



##-----------------------------------------------------------------------------
# robot related parameters
# ----------------------
# robot_ids: robot names
# robot_transportation_rate: array of floats, speed of a robot (values for all
#                                             robots, or single value to be
#                                             copied), m/s
# robot_max_n_trays:
#   func: none/copy, function to populate values for all robots
#   value: array of integers, maximum number of trays that can be carried by
#                             the robot (values for all robots, or single
#                             value to be copied)
# robot_unloading_time: array of floats, time required by the robot to unload
#                                        a tray at local storage (values for
#                                        all pickers, or single value to be
#                                        copied), s
##-----------------------------------------------------------------------------
robot_transportation_rate: [1.0]
robot_max_n_trays:
  func: copy
  value: [4]
robot_unloading_time: [10.0]

# base station used as robot home and waiting place when the cold storage node is busy
# number of base stations should equal to number of robots
base_station_nodes: &id_base_stations
  - WayPoint108
  - WayPoint107
  - WayPoint106
  - WayPoint105
  - WayPoint104
  - WayPoint103
  - WayPoint102
  - WayPoint101
  - WayPoint100
  - WayPoint99
  - WayPoint98
  - WayPoint97
  - WayPoint152
  - WayPoint153
  - WayPoint155
  - WayPoint156
  - WayPoint157
  - WayPoint158
  - WayPoint160
  - WayPoint161
  - WayPoint163
  - WayPoint164
  - WayPoint165
  - WayPoint166
  - WayPoint167
  - WayPoint168
  - WayPoint170
  - WayPoint171
  - WayPoint172
  - WayPoint173
  - WayPoint174
  - WayPoint175
  - WayPoint176
  - WayPoint177
  - WayPoint179
  - WayPoint180
  - WayPoint181
  - WayPoint182
  - WayPoint183
  - WayPoint184

wait_nodes: *id_base_stations
