<?xml version="1.0" ?>
<launch>

  <!-- 2D occupancy grid map  -->
  <arg name="map"/>
  <!-- Filename of the topological map.  -->
  <arg name="file" default=""/>
  <!-- Cache the topological map in `.ros/topological_maps` when loading in map manager 2. -->
  <arg name="cache_topological_maps" default="true"/>
  <!-- Automatically save changes to the topological map after a service call. -->
  <arg name="auto_write_topological_maps" default="true"/>
  <!-- Pointset of the topological map (its name in the mongo database). --> 	
  <arg name="pointset" default=""/> 
  <!-- If false load a tmap2 using the map manager 2, else load a tmap using the legacy map manager.  -->
  <arg name="legacy" default="false"/> 
  <!-- If true map manager 2 converts tmap2 (topic: /topological_map_2) to legacy format (topic: /topological_map). -->
  <arg name="convert_to_legacy" default="true"/> 
  <!-- Load the map from its file rather than mongodb if using the legacy map manager.  -->
  <arg name="load_map_from_file" default="false" />
	

  <node name="static_transform_publisher" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 world map 10"/>
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map)"/>

  <node pkg="topological_navigation" type="map_manager.py" name="topological_map_manager" args="-f $(arg file)" respawn="true" if="$(eval arg('legacy') and arg('load_map_from_file'))"/>
  <node pkg="topological_navigation" type="map_manager.py" name="topological_map_manager" args="$(arg pointset)" respawn="true" if="$(eval arg('legacy') and not arg('load_map_from_file'))"/>

  <node pkg="topological_navigation" type="map_manager2.py" name="topological_map_manager" args="$(arg file)" respawn="true" unless="$(arg legacy)">
    <param name="cache_topological_maps" value="$(arg cache_topological_maps)"/>
    <param name="auto_write_topological_maps" value="$(arg auto_write_topological_maps)"/>
    <param name="convert_to_legacy" value="$(arg convert_to_legacy)"/>
  </node>

  <node pkg="topological_navigation" type="visualise_map2.py" name="visualise_map" args="-no_goto" respawn="true"/>

  <node pkg="topological_rviz_tools" name="topmap_interface" type="python_topmap_interface.py" output="screen" if="$(eval arg('legacy') and not arg('load_map_from_file'))">
    <param name="map_name" value="$(arg pointset)"/>
  </node>

  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find topological_utils)/support/map_edition.rviz" /> 

</launch>
